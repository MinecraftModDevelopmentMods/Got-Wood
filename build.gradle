buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}
<<<<<<< HEAD
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


version = "-0.0"
group= "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GotWood1.10.2"
=======
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven-publish"
apply plugin: "org.sonarqube"

description = "Got Wood?"
def mod_file = getModFile()
def mc_version = "1.12"
def short_version = getVersion("VERSION", mod_file)
version = mc_version + "-" + short_version

group = "panda.gotwood"
archivesBaseName = "GotWood"
>>>>>>> 87abbf6cf6d1218e06bd1a18365c8d25836ce6dc

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}
<<<<<<< HEAD

minecraft {
    version = "1.10.2-12.18.3.2297"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161111"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
=======

javadoc {
    failOnError = false
}

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ""
    }
}

import groovy.json.JsonSlurper
def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file "secret.json"
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    version = "1.12-14.21.1.2413"
    runDir = "run"
    mappings = "snapshot_20170714"
//  makeObfSourceJar = false
>>>>>>> 87abbf6cf6d1218e06bd1a18365c8d25836ce6dc
}

dependencies {}

<<<<<<< HEAD
processResources
{
    // this will ensure that this task is redone when the versions change.
=======
processResources {
>>>>>>> 87abbf6cf6d1218e06bd1a18365c8d25836ce6dc
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version
    }
<<<<<<< HEAD
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
=======
    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.getDestinationDir()
}

artifacts {
//  archives apiJar
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
/*
            artifact apiJar {
                classifier "api"
            }
*/
            artifact deobfJar {
                classifier "deobf"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

String getModFile() {
    String path = ""
    FileTree tree = fileTree(dir: "src/main/java")
    tree.include "**/*.java"
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith("@Mod(")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = "0"
    String revision = "0"
    String patch = "0"
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")
            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}

sonarqube {
     properties {
         property "sonar.host.url", secret.sonarHost
         property "sonar.organization", secret.sonarOrganization
         property "sonar.login", secret.sonarToken
         property "sonar.projectName", project.archivesBaseName
         property "sonar.projectKey", "$project.group:$project.archivesBaseName"
     }
 }
